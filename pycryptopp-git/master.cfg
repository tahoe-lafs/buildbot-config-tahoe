# -*- python -*-
# -*- coding: utf-8 -*-
# vim: set filetype=python:

import os, sys

# /home/buildmaster/buildmaster needs to be on your sys.path for bbsupport
insertable = os.path.dirname(os.path.dirname(__file__))
print "about to insert into sys.path for bbsupport: ", insertable
sys.path.insert(0, insertable)

from bbsupport import CompileAndShowVersion, Stdeb, ToolVersions, UpdateAptRepo, UploadDeb, UploadSdistToPyPI, PythonCommand

from buildbot.process import factory
from buildbot.steps.shell import Test
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.source.git import Git
from buildbot.steps.python import PyFlakes
from buildbot.buildslave import BuildSlave

# we tell slave admins to use master= buildmaster.tahoe-lafs.org:10998

c = BuildmasterConfig = {}
def bs(name, pw, missing_timeout=36000):
    return BuildSlave(name, pw,
                      notify_on_missing=["noc-org-buildslaves@tahoe-lafs.org"],
                      missing_timeout=missing_timeout,
                      )

# /home/buildmaster needs to be on your sys.path for secrets
insertable = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
print "about to insert into sys.path for secrets: ", insertable
sys.path.insert(0, insertable)

import secrets

buildslaves = secrets.passwords

c['slaves'] = [BuildSlave(slavename, pw, missing_timeout=7200)
               for slavename,pw in buildslaves.items()]

c['builders'] = []

# REPOS can start with "git:" or "https:" and end with no suffix or with ".git"
REPOS = []

PROJECT='pycryptopp'
for HOST in ['github.com', 'tahoe-lafs.org']:
    for USER in ['tahoe-lafs', 'warner', 'zooko', 'davidsarah']:
        # GoodRepo forcibly replaces https: with git: (to work around some
        # buildslaves that fail to handle SSL correctly: Kyle OpenBSD and
        # FreeStorm CentOS). It checks URLs against the whitelist after this
        # substitution. So don't bother registering https: URLs.
        PATH = '/'.join([HOST, USER, PROJECT])
        REPOS.append("https://" + PATH)
        REPOS.append("https://" + PATH + ".git")
DEFAULT_REPOURL = "https://github.com/tahoe-lafs/pycryptopp"

from safe_repourls import GoodRepo
REPOURL = GoodRepo(REPOS, DEFAULT_REPOURL)


# build/lib.linux-x86_64-2.7
# build\lib.win32-2.6
build_path_pcmd = (
    "import os, platform, sys;"
    "from distutils.util import get_platform;"
    "plat_name=get_platform()+'-'+sys.version[0:3];"
    "libdir=os.path.join(os.getcwd(), 'build', 'lib.'+plat_name);"
    "os.environ['PYTHONPATH']=libdir+os.pathsep+os.environ.get('PYTHONPATH','');"
    "sys.path.insert(0, libdir);"
    )

double_load_test_pcmd = build_path_pcmd + (
    "import pycryptopp;"
    "print pycryptopp;"
    "import _doubleloadtester;"
    "print _doubleloadtester;"
    )

version_pcmd = build_path_pcmd + (
    "import pycryptopp;"
    "print \"pycryptopp: \", pycryptopp;"
    "print \"pycryptopp.__version__: \", pycryptopp.__version__,;"
    "print \"pycryptopp._pycryptopp.cryptopp_version: \", pycryptopp._pycryptopp.cryptopp_version;"
    "print \"pycryptopp.publickey.ed25519._version.get_versions(): \", pycryptopp.publickey.ed25519._version.get_versions();"
    "import pkg_resources;"
    "print \"pkg_resources.require('pycryptopp'): \", pkg_resources.require('pycryptopp');"
    )

class DoubleLoadTest(PythonCommand):
    """
    Step to see what happens when you import pycryptopp and another module
    that also links to libcryptopp.so.
    """
    flunkOnFailure = True
    haltOnFailure = True
    description = "double load"
    descriptionDone = "double load"
    name = "doubleload"

    def __init__(self, *args, **kwargs):
        python_command = ["-c", double_load_test_pcmd]
        kwargs['python_command'] = python_command
        PythonCommand.__init__(self, *args, **kwargs)

def make_factory(build_deb=False, external_cryptopp=False, upload_deb=False,
                 upload_sdist_to_pypi=False,
                 valgrind=False,
                 valgrind_suppressions_files=('misc/coding_helpers/python.supp',),
                 valgrind_gen_suppressions=False,
                 run_pyflakes=False):
    assert not (not build_deb and upload_deb)
    f = factory.BuildFactory()
    f.addStep(Git(mode="full", repourl=REPOURL))
    f.addStep(ToolVersions())
    if external_cryptopp:
        f.addStep(CompileAndShowVersion(command=["python", "setup.py", "build", "--use-system-cryptopp-with-asm", "--build-double-load-tester"], timeout=36000))
    else:
        f.addStep(CompileAndShowVersion(command=["python", "setup.py", "build", "--build-double-load-tester"], timeout=36000))
    if run_pyflakes:
        f.addStep(PyFlakes(command=["python", "setup.py", "flakes"],
                           warnOnWarnings=True, flunkOnFailure=True))
    if valgrind:
        vg_cmdline = ["valgrind", "--error-exitcode=1", "--log-file=valgrind.log.txt",]
        for suppf in valgrind_suppressions_files:
            vg_cmdline.append("--suppressions="+suppf)
        if valgrind_gen_suppressions:
            vg_cmdline.append("--gen-suppressions=all")

        f.addStep(Test(command=vg_cmdline + ["python", "-c", version_pcmd],
                       flunkOnFailure=True, haltOnFailure=True,
                       logfiles={'valgrind': 'valgrind.log.txt'},
                       description='version', descriptionDone='version',
                       name='version'))
        f.addStep(Test(command=vg_cmdline + ["python", "setup.py", "test"],
                       flunkOnFailure=False, warnOnFailure=True,
                       logfiles={'valgrind': 'valgrind.log.txt'},
                       description='test valgrind',
                       descriptionDone='test valgrind',
                       name='test valgrind'))
        f.addStep(Test(command=vg_cmdline + ["python", "-c", double_load_test_pcmd],
                       flunkOnFailure=False, warnOnFailure=True,
                       logfiles={'valgrind': 'valgrind.log.txt'},
                       description='double load valgrind',
                       descriptionDone='double load valgrind',
                       name='double load valgrind'))
    else:
        f.addStep(Test(command=["python", "-c", version_pcmd],
                       flunkOnFailure=True, haltOnFailure=True,
                       description='version', descriptionDone='version',
                       name='version'))
    # unfortunately, the Test class doesn't automatically copy
    # descriptionDone from the description= you pass in, so you have to pass
    # both.
    f.addStep(Test(command=["python", "setup.py", "test"],
                   flunkOnFailure=True, haltOnFailure=True,
                   description='test', descriptionDone='test',
                   name='test'))
    f.addStep(DoubleLoadTest(flunkOnFailure=True, haltOnFailure=True,
                   description='double load', descriptionDone='double load',
                   name='doubleload'))
    if upload_sdist_to_pypi:
        f.addStep(UploadSdistToPyPI()) # requires a password for zooko's pypi account
    if build_deb:
        f.addStep(Stdeb(warnOnWarnings=False, timeout=36000))
    if upload_deb:
        f.addStep(UploadDeb(upload_furlfile="../../main-deb.furl", deb_filename_base="deb_dist/python-pycryptopp"))
        f.addStep(UpdateAptRepo(update_furlfile="../../tahoe-update-apt.furl"))
    return f

from buildbot.config import BuilderConfig

#c['builders'].append(BuilderConfig(name="FreeStorm Win7-amd64-mingw py2.6",
#                                   slavenames=["freestorm-win7-64-mingw"],
#                                   factory=make_factory(),
#                                   ))

c['builders'].append(BuilderConfig(name="FreeStorm CentOS5-i386",
                                   slavenames=["freestorm-centos5-i386"],
                                   factory=make_factory(
                                       valgrind=True,
                                       valgrind_gen_suppressions=True),
                                   ))

c['builders'].append(BuilderConfig(name="FreeStorm CentOS6-amd64",
                                   slavenames=["freestorm-centos6-amd64"],
                                   factory=make_factory(
                                       valgrind=True,
                                       valgrind_gen_suppressions=True),
                                   ))

# c['builders'].append(BuilderConfig(name="Arthur debian-lenny-c7-i386",
#                                    slavenames=["arthur-lenny-c7-32bit"],
#                                    factory=make_factory(valgrind=True),
#                                    ))

# c['builders'].append(BuilderConfig(name="Arthur debian-lenny-c7-i386 syslib",
#                                    slavenames=["arthur-lenny-c7-32bit"],
#                                    factory=make_factory(external_cryptopp=True, valgrind=True),
#                                    ))

# c['builders'].append(BuilderConfig(name="Ruben Fedora",
#                                    slavenames=["buildbot.rubenkerkhof.com"],
#                                    factory=make_factory(
#                                        valgrind=True,
#                                        valgrind_gen_suppressions=True,
#                                        ),
#                                    ))

# c['builders'].append(BuilderConfig(name="Ruben Fedora syslib",
#                                    slavenames=["buildbot.rubenkerkhof.com"],
#                                    factory=make_factory(
#                                        external_cryptopp=True,
#                                        valgrind=True,
#                                        valgrind_gen_suppressions=True,
#                                        ),
#                                    ))

c['builders'].append(BuilderConfig(name="francois-ts109-armv5tel syslib",
                                   slavenames=["francois-ts109-armv5tel"],
                                   factory=make_factory(external_cryptopp=True),
                                   ))

c['builders'].append(BuilderConfig(name="Kyle OpenBSD-amd64",
                                   slavenames=["starfish"],
                                   factory=make_factory(
                                       run_pyflakes=True,
                                       ),
                                   ))

## c['builders'].append(BuilderConfig(name="Randy FreeBSD-amd64",
##                                    slavenames=["freebsd.psg"],
##                                    factory=make_factory(
##                                        ),
##                                    ))

c['builders'].append(BuilderConfig(name="MM netbsd5 i386 warp",
                                   slavenames=["warp"],
                                   factory=make_factory(
                                       ),
                                   ))

c['builders'].append(BuilderConfig(name="MM netbsd5 i386 warp syslib",
                                   slavenames=["warp"],
                                   factory=make_factory(
                                       external_cryptopp=True,
                                       ),
                                   ))

## c['builders'].append(BuilderConfig(name="atlas1 natty",
##                                    slavenames=["atlas1"],
##                                    factory=make_factory(
##                                        external_cryptopp=False,
##                                        valgrind=True,
##                                        ),
##                                    ))

## c['builders'].append(BuilderConfig(name="atlas1 natty syslib",
##                                    slavenames=["atlas1"],
##                                    factory=make_factory(
##                                        external_cryptopp=True,
##                                        valgrind=False,
##                                        ),
##                                    ))

c['builders'].append(BuilderConfig(name="marcusw cygwin",
                                   slavenames=["wanners.net-winxp-cygwin"],
                                   factory=make_factory(
                                       external_cryptopp=False,
                                       ),
                                   ))

## c['builders'].append(BuilderConfig(name="elb debian6 ppc64",
##                                    slavenames=["elb-debian6-ppc64"],
##                                    factory=make_factory(
##                                        external_cryptopp=False,
##                                        valgrind=True,
##                                        valgrind_gen_suppressions=True,
##                                        ),
##                                    ))

c['builders'].append(BuilderConfig(name="trusty 14.04",
                                   slavenames=["warner-linode-pycryptopp"],
                                   factory=make_factory(
                                       external_cryptopp=False,
                                       ),
                                   ))

c['builders'].append(BuilderConfig(name="trusty 14.04 syslib",
                                   slavenames=["warner-linode-pycryptopp"],
                                   factory=make_factory(
                                       external_cryptopp=True,
                                       ),
                                   ))

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
    name="full",
    change_filter=filter.ChangeFilter(branch='master'),
    treeStableTimer=3,
    builderNames=[b.name for b in c['builders']] ))

sch = ForceScheduler(name="force",
             builderNames=[ b.name for b in c['builders']],

             # A completely customized property list.  The name of the
             # property is the name of the parameter
             properties=[]
             )
c['schedulers'].append(sch)

####### STATUS TARGETS

from buildbot.status import html, mail
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = True,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
ws = html.WebStatus(http_port=8013, authz=authz_cfg)
c['status'] = []
c['status'].append(ws)
c['status'].append(mail.MailNotifier(fromaddr="noc-buildbot@tahoe-lafs.org",
                                     builders=[]))

####### CHANGESOURCES
import github_posthook
github_posthook.setup(c, ws, "github_hook")

c['slavePortnum'] = 10998

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "pycryptopp"
c['titleURL'] = "https://tahoe-lafs.org/trac/pycryptopp"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "https://tahoe-lafs.org/buildbot-pycryptopp/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"
